#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinic")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertExaminationDictionary(ExaminationDictionary instance);
    partial void UpdateExaminationDictionary(ExaminationDictionary instance);
    partial void DeleteExaminationDictionary(ExaminationDictionary instance);
    partial void InsertLabExamination(LabExamination instance);
    partial void UpdateLabExamination(LabExamination instance);
    partial void DeleteLabExamination(LabExamination instance);
    partial void InsertLabManager(LabManager instance);
    partial void UpdateLabManager(LabManager instance);
    partial void DeleteLabManager(LabManager instance);
    partial void InsertLabTechnician(LabTechnician instance);
    partial void UpdateLabTechnician(LabTechnician instance);
    partial void DeleteLabTechnician(LabTechnician instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPhysicalExamination(PhysicalExamination instance);
    partial void UpdatePhysicalExamination(PhysicalExamination instance);
    partial void DeletePhysicalExamination(PhysicalExamination instance);
    partial void InsertReceptionist(Receptionist instance);
    partial void UpdateReceptionist(Receptionist instance);
    partial void DeleteReceptionist(Receptionist instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.ClinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ExaminationDictionary> ExaminationDictionaries
		{
			get
			{
				return this.GetTable<ExaminationDictionary>();
			}
		}
		
		public System.Data.Linq.Table<LabExamination> LabExaminations
		{
			get
			{
				return this.GetTable<LabExamination>();
			}
		}
		
		public System.Data.Linq.Table<LabManager> LabManagers
		{
			get
			{
				return this.GetTable<LabManager>();
			}
		}
		
		public System.Data.Linq.Table<LabTechnician> LabTechnicians
		{
			get
			{
				return this.GetTable<LabTechnician>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalExamination> PhysicalExaminations
		{
			get
			{
				return this.GetTable<PhysicalExamination>();
			}
		}
		
		public System.Data.Linq.Table<Receptionist> Receptionists
		{
			get
			{
				return this.GetTable<Receptionist>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentID;
		
		private int _DoctorID;
		
		private int _PatientID;
		
		private int _ReceptionistID;
		
		private string _Description;
		
		private string _Diagnosis;
		
		private string _Status;
		
		private System.DateTime _DateRegistered;
		
		private System.DateTime _DateOfAppointment;
		
		private System.Nullable<System.DateTime> _DateCompletedOrCanceled;
		
		private EntitySet<LabExamination> _LabExaminations;
		
		private EntitySet<PhysicalExamination> _PhysicalExaminations;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Receptionist> _Receptionist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnReceptionistIDChanging(int value);
    partial void OnReceptionistIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDateRegisteredChanging(System.DateTime value);
    partial void OnDateRegisteredChanged();
    partial void OnDateOfAppointmentChanging(System.DateTime value);
    partial void OnDateOfAppointmentChanged();
    partial void OnDateCompletedOrCanceledChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCompletedOrCanceledChanged();
    #endregion
		
		public Appointment()
		{
			this._LabExaminations = new EntitySet<LabExamination>(new Action<LabExamination>(this.attach_LabExaminations), new Action<LabExamination>(this.detach_LabExaminations));
			this._PhysicalExaminations = new EntitySet<PhysicalExamination>(new Action<PhysicalExamination>(this.attach_PhysicalExaminations), new Action<PhysicalExamination>(this.detach_PhysicalExaminations));
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			this._Receptionist = default(EntityRef<Receptionist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionistID", DbType="Int NOT NULL")]
		public int ReceptionistID
		{
			get
			{
				return this._ReceptionistID;
			}
			set
			{
				if ((this._ReceptionistID != value))
				{
					if (this._Receptionist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptionistIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptionistID = value;
					this.SendPropertyChanged("ReceptionistID");
					this.OnReceptionistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="VarChar(1024)")]
		public string Diagnosis
		{
			get
			{
				return this._Diagnosis;
			}
			set
			{
				if ((this._Diagnosis != value))
				{
					this.OnDiagnosisChanging(value);
					this.SendPropertyChanging();
					this._Diagnosis = value;
					this.SendPropertyChanged("Diagnosis");
					this.OnDiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistered", DbType="DateTime NOT NULL")]
		public System.DateTime DateRegistered
		{
			get
			{
				return this._DateRegistered;
			}
			set
			{
				if ((this._DateRegistered != value))
				{
					this.OnDateRegisteredChanging(value);
					this.SendPropertyChanging();
					this._DateRegistered = value;
					this.SendPropertyChanged("DateRegistered");
					this.OnDateRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAppointment", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAppointment
		{
			get
			{
				return this._DateOfAppointment;
			}
			set
			{
				if ((this._DateOfAppointment != value))
				{
					this.OnDateOfAppointmentChanging(value);
					this.SendPropertyChanging();
					this._DateOfAppointment = value;
					this.SendPropertyChanged("DateOfAppointment");
					this.OnDateOfAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompletedOrCanceled", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCompletedOrCanceled
		{
			get
			{
				return this._DateCompletedOrCanceled;
			}
			set
			{
				if ((this._DateCompletedOrCanceled != value))
				{
					this.OnDateCompletedOrCanceledChanging(value);
					this.SendPropertyChanging();
					this._DateCompletedOrCanceled = value;
					this.SendPropertyChanged("DateCompletedOrCanceled");
					this.OnDateCompletedOrCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_LabExamination", Storage="_LabExaminations", ThisKey="AppointmentID", OtherKey="AppointmentID")]
		public EntitySet<LabExamination> LabExaminations
		{
			get
			{
				return this._LabExaminations;
			}
			set
			{
				this._LabExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_PhysicalExamination", Storage="_PhysicalExaminations", ThisKey="AppointmentID", OtherKey="AppointmentID")]
		public EntitySet<PhysicalExamination> PhysicalExaminations
		{
			get
			{
				return this._PhysicalExaminations;
			}
			set
			{
				this._PhysicalExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receptionist_Appointment", Storage="_Receptionist", ThisKey="ReceptionistID", OtherKey="ReceptionistID", IsForeignKey=true)]
		public Receptionist Receptionist
		{
			get
			{
				return this._Receptionist.Entity;
			}
			set
			{
				Receptionist previousValue = this._Receptionist.Entity;
				if (((previousValue != value) 
							|| (this._Receptionist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receptionist.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Receptionist.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._ReceptionistID = value.ReceptionistID;
					}
					else
					{
						this._ReceptionistID = default(int);
					}
					this.SendPropertyChanged("Receptionist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
		
		private void attach_PhysicalExaminations(PhysicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_PhysicalExaminations(PhysicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorID;
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _PWZNumber;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPWZNumberChanging(int value);
    partial void OnPWZNumberChanged();
    #endregion
		
		public Doctor()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PWZNumber", DbType="Int NOT NULL")]
		public int PWZNumber
		{
			get
			{
				return this._PWZNumber;
			}
			set
			{
				if ((this._PWZNumber != value))
				{
					this.OnPWZNumberChanging(value);
					this.SendPropertyChanging();
					this._PWZNumber = value;
					this.SendPropertyChanged("PWZNumber");
					this.OnPWZNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Appointments", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Hashcode;
		
		private string _Role;
		
		private System.Nullable<System.DateTime> _DateRetired;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<LabManager> _LabManagers;
		
		private EntitySet<LabTechnician> _LabTechnicians;
		
		private EntitySet<Receptionist> _Receptionists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnHashcodeChanging(string value);
    partial void OnHashcodeChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnDateRetiredChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRetiredChanged();
    #endregion
		
		public User()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._LabManagers = new EntitySet<LabManager>(new Action<LabManager>(this.attach_LabManagers), new Action<LabManager>(this.detach_LabManagers));
			this._LabTechnicians = new EntitySet<LabTechnician>(new Action<LabTechnician>(this.attach_LabTechnicians), new Action<LabTechnician>(this.detach_LabTechnicians));
			this._Receptionists = new EntitySet<Receptionist>(new Action<Receptionist>(this.attach_Receptionists), new Action<Receptionist>(this.detach_Receptionists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="VarChar(100)")]
		public string Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRetired", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRetired
		{
			get
			{
				return this._DateRetired;
			}
			set
			{
				if ((this._DateRetired != value))
				{
					this.OnDateRetiredChanging(value);
					this.SendPropertyChanging();
					this._DateRetired = value;
					this.SendPropertyChanged("DateRetired");
					this.OnDateRetiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_Doctors", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabManager", Storage="_LabManagers", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<LabManager> LabManagers
		{
			get
			{
				return this._LabManagers;
			}
			set
			{
				this._LabManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabTechnician", Storage="_LabTechnicians", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<LabTechnician> LabTechnicians
		{
			get
			{
				return this._LabTechnicians;
			}
			set
			{
				this._LabTechnicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Receptionist", Storage="_Receptionists", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Receptionist> Receptionists
		{
			get
			{
				return this._Receptionists;
			}
			set
			{
				this._Receptionists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LabManagers(LabManager entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LabManagers(LabManager entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LabTechnicians(LabTechnician entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LabTechnicians(LabTechnician entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Receptionists(Receptionist entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Receptionists(Receptionist entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExaminationDictionary")]
	public partial class ExaminationDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private char _Type;
		
		private string _Name;
		
		private EntitySet<LabExamination> _LabExaminations;
		
		private EntitySet<PhysicalExamination> _PhysicalExaminations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ExaminationDictionary()
		{
			this._LabExaminations = new EntitySet<LabExamination>(new Action<LabExamination>(this.attach_LabExaminations), new Action<LabExamination>(this.detach_LabExaminations));
			this._PhysicalExaminations = new EntitySet<PhysicalExamination>(new Action<PhysicalExamination>(this.attach_PhysicalExaminations), new Action<PhysicalExamination>(this.detach_PhysicalExaminations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Char(1) NOT NULL")]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExaminationDictionary_LabExamination", Storage="_LabExaminations", ThisKey="Code", OtherKey="Code")]
		public EntitySet<LabExamination> LabExaminations
		{
			get
			{
				return this._LabExaminations;
			}
			set
			{
				this._LabExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExaminationDictionary_PhysicalExamination", Storage="_PhysicalExaminations", ThisKey="Code", OtherKey="Code")]
		public EntitySet<PhysicalExamination> PhysicalExaminations
		{
			get
			{
				return this._PhysicalExaminations;
			}
			set
			{
				this._PhysicalExaminations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.ExaminationDictionary = this;
		}
		
		private void detach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.ExaminationDictionary = null;
		}
		
		private void attach_PhysicalExaminations(PhysicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.ExaminationDictionary = this;
		}
		
		private void detach_PhysicalExaminations(PhysicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.ExaminationDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabExamination")]
	public partial class LabExamination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabExaminationID;
		
		private string _Code;
		
		private int _AppointmentID;
		
		private System.Nullable<int> _LabTechnicianID;
		
		private System.Nullable<int> _LabManagerID;
		
		private System.DateTime _DateRegistered;
		
		private string _Result;
		
		private string _DoctorComments;
		
		private System.Nullable<System.DateTime> _DateCompletedOrCanceled;
		
		private string _LabManagerComments;
		
		private System.Nullable<System.DateTime> _DateApprovedOrCanceled;
		
		private string _Status;
		
		private EntityRef<Appointment> _Appointment;
		
		private EntityRef<ExaminationDictionary> _ExaminationDictionary;
		
		private EntityRef<LabManager> _LabManager;
		
		private EntityRef<LabTechnician> _LabTechnician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabExaminationIDChanging(int value);
    partial void OnLabExaminationIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnLabTechnicianIDChanging(System.Nullable<int> value);
    partial void OnLabTechnicianIDChanged();
    partial void OnLabManagerIDChanging(System.Nullable<int> value);
    partial void OnLabManagerIDChanged();
    partial void OnDateRegisteredChanging(System.DateTime value);
    partial void OnDateRegisteredChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnDoctorCommentsChanging(string value);
    partial void OnDoctorCommentsChanged();
    partial void OnDateCompletedOrCanceledChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCompletedOrCanceledChanged();
    partial void OnLabManagerCommentsChanging(string value);
    partial void OnLabManagerCommentsChanged();
    partial void OnDateApprovedOrCanceledChanging(System.Nullable<System.DateTime> value);
    partial void OnDateApprovedOrCanceledChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public LabExamination()
		{
			this._Appointment = default(EntityRef<Appointment>);
			this._ExaminationDictionary = default(EntityRef<ExaminationDictionary>);
			this._LabManager = default(EntityRef<LabManager>);
			this._LabTechnician = default(EntityRef<LabTechnician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabExaminationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LabExaminationID
		{
			get
			{
				return this._LabExaminationID;
			}
			set
			{
				if ((this._LabExaminationID != value))
				{
					this.OnLabExaminationIDChanging(value);
					this.SendPropertyChanging();
					this._LabExaminationID = value;
					this.SendPropertyChanged("LabExaminationID");
					this.OnLabExaminationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					if (this._ExaminationDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int NOT NULL")]
		public int AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTechnicianID", DbType="Int")]
		public System.Nullable<int> LabTechnicianID
		{
			get
			{
				return this._LabTechnicianID;
			}
			set
			{
				if ((this._LabTechnicianID != value))
				{
					if (this._LabTechnician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabTechnicianIDChanging(value);
					this.SendPropertyChanging();
					this._LabTechnicianID = value;
					this.SendPropertyChanged("LabTechnicianID");
					this.OnLabTechnicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabManagerID", DbType="Int")]
		public System.Nullable<int> LabManagerID
		{
			get
			{
				return this._LabManagerID;
			}
			set
			{
				if ((this._LabManagerID != value))
				{
					if (this._LabManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabManagerIDChanging(value);
					this.SendPropertyChanging();
					this._LabManagerID = value;
					this.SendPropertyChanged("LabManagerID");
					this.OnLabManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistered", DbType="DateTime NOT NULL")]
		public System.DateTime DateRegistered
		{
			get
			{
				return this._DateRegistered;
			}
			set
			{
				if ((this._DateRegistered != value))
				{
					this.OnDateRegisteredChanging(value);
					this.SendPropertyChanging();
					this._DateRegistered = value;
					this.SendPropertyChanged("DateRegistered");
					this.OnDateRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(1024)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorComments", DbType="VarChar(1024)")]
		public string DoctorComments
		{
			get
			{
				return this._DoctorComments;
			}
			set
			{
				if ((this._DoctorComments != value))
				{
					this.OnDoctorCommentsChanging(value);
					this.SendPropertyChanging();
					this._DoctorComments = value;
					this.SendPropertyChanged("DoctorComments");
					this.OnDoctorCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompletedOrCanceled", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCompletedOrCanceled
		{
			get
			{
				return this._DateCompletedOrCanceled;
			}
			set
			{
				if ((this._DateCompletedOrCanceled != value))
				{
					this.OnDateCompletedOrCanceledChanging(value);
					this.SendPropertyChanging();
					this._DateCompletedOrCanceled = value;
					this.SendPropertyChanged("DateCompletedOrCanceled");
					this.OnDateCompletedOrCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabManagerComments", DbType="VarChar(1024)")]
		public string LabManagerComments
		{
			get
			{
				return this._LabManagerComments;
			}
			set
			{
				if ((this._LabManagerComments != value))
				{
					this.OnLabManagerCommentsChanging(value);
					this.SendPropertyChanging();
					this._LabManagerComments = value;
					this.SendPropertyChanged("LabManagerComments");
					this.OnLabManagerCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateApprovedOrCanceled", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateApprovedOrCanceled
		{
			get
			{
				return this._DateApprovedOrCanceled;
			}
			set
			{
				if ((this._DateApprovedOrCanceled != value))
				{
					this.OnDateApprovedOrCanceledChanging(value);
					this.SendPropertyChanging();
					this._DateApprovedOrCanceled = value;
					this.SendPropertyChanged("DateApprovedOrCanceled");
					this.OnDateApprovedOrCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_LabExamination", Storage="_Appointment", ThisKey="AppointmentID", OtherKey="AppointmentID", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.LabExaminations.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.LabExaminations.Add(this);
						this._AppointmentID = value.AppointmentID;
					}
					else
					{
						this._AppointmentID = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExaminationDictionary_LabExamination", Storage="_ExaminationDictionary", ThisKey="Code", OtherKey="Code", IsForeignKey=true)]
		public ExaminationDictionary ExaminationDictionary
		{
			get
			{
				return this._ExaminationDictionary.Entity;
			}
			set
			{
				ExaminationDictionary previousValue = this._ExaminationDictionary.Entity;
				if (((previousValue != value) 
							|| (this._ExaminationDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExaminationDictionary.Entity = null;
						previousValue.LabExaminations.Remove(this);
					}
					this._ExaminationDictionary.Entity = value;
					if ((value != null))
					{
						value.LabExaminations.Add(this);
						this._Code = value.Code;
					}
					else
					{
						this._Code = default(string);
					}
					this.SendPropertyChanged("ExaminationDictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabManager_LabExamination", Storage="_LabManager", ThisKey="LabManagerID", OtherKey="LabManagerID", IsForeignKey=true)]
		public LabManager LabManager
		{
			get
			{
				return this._LabManager.Entity;
			}
			set
			{
				LabManager previousValue = this._LabManager.Entity;
				if (((previousValue != value) 
							|| (this._LabManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabManager.Entity = null;
						previousValue.LabExaminations.Remove(this);
					}
					this._LabManager.Entity = value;
					if ((value != null))
					{
						value.LabExaminations.Add(this);
						this._LabManagerID = value.LabManagerID;
					}
					else
					{
						this._LabManagerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTechnician_LabExamination", Storage="_LabTechnician", ThisKey="LabTechnicianID", OtherKey="LabTechnicianID", IsForeignKey=true)]
		public LabTechnician LabTechnician
		{
			get
			{
				return this._LabTechnician.Entity;
			}
			set
			{
				LabTechnician previousValue = this._LabTechnician.Entity;
				if (((previousValue != value) 
							|| (this._LabTechnician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabTechnician.Entity = null;
						previousValue.LabExaminations.Remove(this);
					}
					this._LabTechnician.Entity = value;
					if ((value != null))
					{
						value.LabExaminations.Add(this);
						this._LabTechnicianID = value.LabTechnicianID;
					}
					else
					{
						this._LabTechnicianID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabTechnician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabManager")]
	public partial class LabManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabManagerID;
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<LabExamination> _LabExaminations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabManagerIDChanging(int value);
    partial void OnLabManagerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public LabManager()
		{
			this._LabExaminations = new EntitySet<LabExamination>(new Action<LabExamination>(this.attach_LabExaminations), new Action<LabExamination>(this.detach_LabExaminations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabManagerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabManagerID
		{
			get
			{
				return this._LabManagerID;
			}
			set
			{
				if ((this._LabManagerID != value))
				{
					this.OnLabManagerIDChanging(value);
					this.SendPropertyChanging();
					this._LabManagerID = value;
					this.SendPropertyChanged("LabManagerID");
					this.OnLabManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabManager_LabExamination", Storage="_LabExaminations", ThisKey="LabManagerID", OtherKey="LabManagerID")]
		public EntitySet<LabExamination> LabExaminations
		{
			get
			{
				return this._LabExaminations;
			}
			set
			{
				this._LabExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabManager", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LabManagers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LabManagers.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.LabManager = this;
		}
		
		private void detach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.LabManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabTechnician")]
	public partial class LabTechnician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabTechnicianID;
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<LabExamination> _LabExaminations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabTechnicianIDChanging(int value);
    partial void OnLabTechnicianIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public LabTechnician()
		{
			this._LabExaminations = new EntitySet<LabExamination>(new Action<LabExamination>(this.attach_LabExaminations), new Action<LabExamination>(this.detach_LabExaminations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTechnicianID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabTechnicianID
		{
			get
			{
				return this._LabTechnicianID;
			}
			set
			{
				if ((this._LabTechnicianID != value))
				{
					this.OnLabTechnicianIDChanging(value);
					this.SendPropertyChanging();
					this._LabTechnicianID = value;
					this.SendPropertyChanged("LabTechnicianID");
					this.OnLabTechnicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTechnician_LabExamination", Storage="_LabExaminations", ThisKey="LabTechnicianID", OtherKey="LabTechnicianID")]
		public EntitySet<LabExamination> LabExaminations
		{
			get
			{
				return this._LabExaminations;
			}
			set
			{
				this._LabExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabTechnician", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LabTechnicians.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LabTechnicians.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.LabTechnician = this;
		}
		
		private void detach_LabExaminations(LabExamination entity)
		{
			this.SendPropertyChanging();
			entity.LabTechnician = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PESEL;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    #endregion
		
		public Patient()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalExamination")]
	public partial class PhysicalExamination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhysicalExaminationID;
		
		private int _AppointmentID;
		
		private string _Code;
		
		private string _Result;
		
		private EntityRef<Appointment> _Appointment;
		
		private EntityRef<ExaminationDictionary> _ExaminationDictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicalExaminationIDChanging(int value);
    partial void OnPhysicalExaminationIDChanged();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public PhysicalExamination()
		{
			this._Appointment = default(EntityRef<Appointment>);
			this._ExaminationDictionary = default(EntityRef<ExaminationDictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalExaminationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhysicalExaminationID
		{
			get
			{
				return this._PhysicalExaminationID;
			}
			set
			{
				if ((this._PhysicalExaminationID != value))
				{
					this.OnPhysicalExaminationIDChanging(value);
					this.SendPropertyChanging();
					this._PhysicalExaminationID = value;
					this.SendPropertyChanged("PhysicalExaminationID");
					this.OnPhysicalExaminationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int NOT NULL")]
		public int AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					if (this._ExaminationDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_PhysicalExamination", Storage="_Appointment", ThisKey="AppointmentID", OtherKey="AppointmentID", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.PhysicalExaminations.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.PhysicalExaminations.Add(this);
						this._AppointmentID = value.AppointmentID;
					}
					else
					{
						this._AppointmentID = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExaminationDictionary_PhysicalExamination", Storage="_ExaminationDictionary", ThisKey="Code", OtherKey="Code", IsForeignKey=true)]
		public ExaminationDictionary ExaminationDictionary
		{
			get
			{
				return this._ExaminationDictionary.Entity;
			}
			set
			{
				ExaminationDictionary previousValue = this._ExaminationDictionary.Entity;
				if (((previousValue != value) 
							|| (this._ExaminationDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExaminationDictionary.Entity = null;
						previousValue.PhysicalExaminations.Remove(this);
					}
					this._ExaminationDictionary.Entity = value;
					if ((value != null))
					{
						value.PhysicalExaminations.Add(this);
						this._Code = value.Code;
					}
					else
					{
						this._Code = default(string);
					}
					this.SendPropertyChanged("ExaminationDictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receptionist")]
	public partial class Receptionist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceptionistID;
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptionistIDChanging(int value);
    partial void OnReceptionistIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Receptionist()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionistID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceptionistID
		{
			get
			{
				return this._ReceptionistID;
			}
			set
			{
				if ((this._ReceptionistID != value))
				{
					this.OnReceptionistIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptionistID = value;
					this.SendPropertyChanged("ReceptionistID");
					this.OnReceptionistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receptionist_Appointment", Storage="_Appointments", ThisKey="ReceptionistID", OtherKey="ReceptionistID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Receptionist", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Receptionists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Receptionists.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Receptionist = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Receptionist = null;
		}
	}
}
#pragma warning restore 1591
